var port = process.env.PORT || 3000;
var express = require('express'),
    app = express(),
    bodyParser = require('body-parser'),
    mongoose = require('mongoose'),
    passport = require('passport'),
    LocalStrategy = require('passport-local'),
    Campground = require('./models/campground'),
    Comment = require("./models/comment"),
    User = require('./models/user'),
    seedDB = require("./seeds")

app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(express.static(__dirname + "/public"));

mongoose.connect("mongodb://localhost:27017/yelp_camp", {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
seedDB();

//=========================//
//passport configuration

app.use(require("express-session")({
    secret: "Yelpcamp secret code",
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
//============================//

// res.locals makes currentUser available in all routes
//This middleware should be written after Passport configuration
app.use((req, res, next) => {
    res.locals.currentUser = req.user;
    next();
})

//==========================
//CAMPGROUND ROUTES
//==========================


app.get('/', (req, res) => {
    res.render("landing");
})
//index route
app.get('/campgrounds', (req, res) => {
    //Get all campgrounds from DB
    Campground.find({}, (err, allCampgrounds) => {
        if (err)
            console.log(err);
        else {
            res.render('campgrounds/index', {
                campgrounds: allCampgrounds
            });
        }
    })

})
//new route
app.get('/campgrounds/new', (req, res) => {
    res.render("campgrounds/new");
})

// Note: Always declare new route before show route, (because new also follows an id,)so that App doesnt get confused between and new and show route

//show route - shows more info about  one campground
//ids will be generated by mongo
app.get('/campgrounds/:id', (req, res) => {
    //find the campground with provided ID - FindByID from mongo
    Campground.findById(req.params.id).populate("comments").exec((err, foundCampground) => {
        if (err)
            console.log(err);
        else {
            console.log(foundCampground)
            //generate a show template with that campground
            res.render("campgrounds/show", {
                campground: foundCampground
            });

        }
    })
})

//Create Route
app.post('/campgrounds', (req, res) => {
    //get data from form
    var name = req.body.name;
    var image = req.body.image;
    var description = req.body.description;
    //add to campground array
    var newCampground = {
        name: name,
        image: image,
        description: description
    };
    //create a new Campground and save to DB
    Campground.create(newCampground, (err, newCamp) => {
        if (err) {
            console.log(err);
        } else {
            //redirect back to campground - get route
            res.redirect('/campgrounds');
        }
    })

})

//==========================
//COMMENT ROUTES
//==========================

app.get("/campgrounds/:id/comments/new", isLoggedIn, (req, res) => {
    //find campground by id
    Campground.findById(req.params.id, (err, campground) => {
        if (err)
            console.log(err);
        else {
            res.render("comments/new", {
                campground: campground
            });
        }
    })

})

app.post("/campgrounds/:id/comments", isLoggedIn, (req, res) => {
    //lookup campground using ID
    Campground.findById(req.params.id, (err, campground) => {
        if (err) {
            console.log(err)
            res.redirect("/campgrounds")

        } else {
            //create new comment
            Comment.create(req.body.comment, (err, comment) => {
                if (err) console.log(err)
                else {
                    //connect new comment to campground
                    campground.comments.push(comment);
                    campground.save();
                    //redirect to campground show page
                    res.redirect("/campgrounds/" + campground._id);
                }
            })

        }
    })


})
//========================//
//Auth ROUTES
//========================//

//register form

app.get('/register', (req, res) => {
    res.render('register');
})
//signup logic - register the user and login using passport.authenticate if there is no error
app.post('/register', (req, res) => {
    var newUser = new User({
        username: req.body.username
    });
    var password = req.body.password;
    User.register(newUser, password, (err, user) => {
        if (err) {
            console.log(err);
            return res.render("register")
        }
        passport.authenticate('local')(req, res, () => {
            res.redirect("/campgrounds");
        })
    })
})

//login form

app.get('/login', (req, res) => {
    res.render('login');
})

//login logic - validate the signed up user and login if its correct and redirect to new page
//app.post('/login',middleware-> given by passport-local-mongoose [passport.use(new LocalStrategy(User.authenticate()));],callback)

app.post('/login', passport.authenticate('local', {
    successRedirect: "/campgrounds",
    failureRedirect: "/login"
}), (req, res) => {

})
//logout route

app.get('/logout', (req, res) => {
    req.logout();
    res.redirect('/campgrounds');
})
//=======================//

//middleware to verify the session of a user
function isLoggedIn(req, res, next) {
    if (req.isAuthenticated()) {
        //handles "Node.js back button after logout" problem
        res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');

        return next();
    }
    res.redirect('/login');
}
app.listen(port, () => {
    console.log("Yelpcamp is started on Server: " + 3000);
})